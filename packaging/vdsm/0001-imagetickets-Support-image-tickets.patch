From 994e7c4f875b240e40ee0d6e4300d19d44759c12 Mon Sep 17 00:00:00 2001
From: Amit Aviram <aaviram@redhat.com>
Date: Wed, 13 Jan 2016 10:20:44 +0200
Subject: [PATCH 1/4] imagetickets: Support image tickets

The introduced module is part of the image transfers implementation,
which lets the end user of oVirt to transfer images to and from
oVirt's storage devices.

Specifically, this VDSM module is responsible for granting permissions
for image transfers, via a ticket mechanism for an image, sent from
engine, through VDSM to imaged - a process for image IO which resides
next to VDSM in the host.

Change-Id: I6b9ded4bde73b1ab504cae50d2cea726d4f77e51
Signed-off-by: Amit Aviram <aaviram@redhat.com>
Reviewed-on: https://gerrit.ovirt.org/50014
Reviewed-by: Nir Soffer <nsoffer@redhat.com>
Continuous-Integration: Jenkins CI
(cherry picked from commit 8ec8e74cd3264d13ef3e474c7836ba7e2db331f1)
---
 debian/vdsm.install               |   1 +
 vdsm.spec.in                      |   1 +
 vdsm/API.py                       |   9 ++++
 vdsm/rpc/vdsmapi-schema.json      |  76 ++++++++++++++++++++++++++++
 vdsm/storage/Makefile.am          |   1 +
 vdsm/storage/hsm.py               |  13 +++++
 vdsm/storage/imagetickets.py      | 104 ++++++++++++++++++++++++++++++++++++++
 vdsm/storage/storage_exception.py |  24 +++++++++
 8 files changed, 229 insertions(+)
 create mode 100644 vdsm/storage/imagetickets.py

diff --git a/debian/vdsm.install b/debian/vdsm.install
index 8a659d6..3ff268e 100644
--- a/debian/vdsm.install
+++ b/debian/vdsm.install
@@ -96,6 +96,7 @@
 ./usr/share/vdsm/storage/fileUtils.py
 ./usr/share/vdsm/storage/fileVolume.py
 ./usr/share/vdsm/storage/fuser.py
+./usr/share/vdsm/storage/imagetickets.py
 ./usr/share/vdsm/storage/glusterSD.py
 ./usr/share/vdsm/storage/glusterVolume.py
 ./usr/share/vdsm/storage/hba.py
diff --git a/vdsm.spec.in b/vdsm.spec.in
index 9b29ee9..55dcac0 100644
--- a/vdsm.spec.in
+++ b/vdsm.spec.in
@@ -936,6 +936,7 @@ exit 0
 %{_datadir}/%{vdsm_name}/storage/fileUtils.py*
 %{_datadir}/%{vdsm_name}/storage/fileVolume.py*
 %{_datadir}/%{vdsm_name}/storage/fuser.py*
+%{_datadir}/%{vdsm_name}/storage/imagetickets.py*
 %{_datadir}/%{vdsm_name}/storage/glusterSD.py*
 %{_datadir}/%{vdsm_name}/storage/glusterVolume.py*
 %{_datadir}/%{vdsm_name}/storage/hba.py*
diff --git a/vdsm/API.py b/vdsm/API.py
index 46c5e66..9e44002 100644
--- a/vdsm/API.py
+++ b/vdsm/API.py
@@ -1763,6 +1763,15 @@ class Global(APIBase):
             return errCode['haErr']
         return {'status': doneCode}
 
+    def add_image_ticket(self, ticket):
+        return self._irs.add_image_ticket(ticket)
+
+    def remove_image_ticket(self, uuid):
+        return self._irs.remove_image_ticket(uuid)
+
+    def extend_image_ticket(self, uuid, timeout):
+        return self._irs.extend_image_ticket(uuid, timeout)
+
     # take a rough estimate on how much free mem is available for new vm
     # memTotal = memFree + memCached + mem_used_by_non_qemu + resident  .
     # simply returning (memFree + memCached) is not good enough, as the
diff --git a/vdsm/rpc/vdsmapi-schema.json b/vdsm/rpc/vdsmapi-schema.json
index cface3b..94e2473 100644
--- a/vdsm/rpc/vdsmapi-schema.json
+++ b/vdsm/rpc/vdsmapi-schema.json
@@ -591,6 +591,82 @@
  'data': {'mode': 'HaMaintenanceMode', 'enabled': 'bool'}}
 
 ##
+# @ImageTicketOps:
+#
+# An enumeration of operation types allowed by an image ticket
+#
+# @write:     permission to write data to image
+#
+# @read:      permission to read data from image
+#
+# Since: 4.18.0
+##
+{'enum': 'ImageTicketOps',
+ 'data': ['write', 'read']}
+
+##
+# @ImageTicket:
+#
+# Information about an image ticket.
+#
+# @uuid:      A ticket UUID
+#
+# @timeout:   Timeout in seconds for the ticket to expire
+#
+# @ops:       operations allowed by this ticket
+#
+# @size:      Maximum size (in bytes) that can be written or read
+#             from the image.
+#
+# @url:       The image url, e.g. "file:///path/to/image"
+#
+# Since: 4.18.0
+##
+{'type': 'ImageTicket',
+ 'data': {'uuid': 'UUID', 'timeout': 'uint', 'ops': ['ImageTicketOps'],
+          'size': 'uint', 'url': 'str'}}
+
+##
+# @Host.add_image_ticket:
+#
+# Start a session to expose an image via imaged daemon https api for
+# reading and writing image data.
+#
+# @ticket:      ImageTicket
+#
+# Since: 4.18.0
+##
+{'command': {'class': 'Host', 'name': 'add_image_ticket'},
+ 'data': {'ticket': 'ImageTicket'}}
+
+##
+# @Host.remove_image_ticket:
+#
+# Stop an image upload data transfer session.
+#
+# @uuid:      uuid of the ticket to be removed
+#
+# Since: 4.18.0
+##
+{'command': {'class': 'Host', 'name': 'remove_image_ticket'},
+ 'data': {'uuid': 'UUID'}}
+
+##
+# @Host.extend_image_ticket:
+#
+# Extend an image upload data transfer session.
+#
+# @uuid:        uuid of the ticket to be extended
+#
+# @timeout:     Timeout in seconds for the ticket to expire.
+#
+# Since: 4.18.0
+##
+{'command': {'class': 'Host', 'name': 'extend_image_ticket'},
+ 'data': {'uuid': 'UUID', 'timeout': 'uint'}}
+
+
+##
 # @TaskDetails:
 #
 # A collection of information about a task.
diff --git a/vdsm/storage/Makefile.am b/vdsm/storage/Makefile.am
index 4ebe0a2..a9ec376 100644
--- a/vdsm/storage/Makefile.am
+++ b/vdsm/storage/Makefile.am
@@ -35,6 +35,7 @@ dist_vdsmstorage_PYTHON = \
 	fileUtils.py \
 	fileVolume.py \
 	fuser.py \
+	imagetickets.py \
 	glusterSD.py \
 	glusterVolume.py \
 	hba.py \
diff --git a/vdsm/storage/hsm.py b/vdsm/storage/hsm.py
index 1880da8..6005026 100644
--- a/vdsm/storage/hsm.py
+++ b/vdsm/storage/hsm.py
@@ -54,6 +54,7 @@ import multipath
 import outOfProcess as oop
 from sdc import sdCache
 import image
+import imagetickets
 import volume
 import iscsi
 import misc
@@ -3103,6 +3104,18 @@ class HSM(object):
                                          volUUID=volUUID).refreshVolume()
 
     @public
+    def add_image_ticket(self, ticket):
+        imagetickets.add_ticket(ticket)
+
+    @public
+    def remove_image_ticket(self, uuid):
+        imagetickets.remove_ticket(uuid)
+
+    @public
+    def extend_image_ticket(self, uuid, timeout):
+        imagetickets.extend_ticket(uuid, timeout)
+
+    @public
     def getVolumeSize(self, sdUUID, spUUID, imgUUID, volUUID, options=None):
         """
         Gets the size of a volume.
diff --git a/vdsm/storage/imagetickets.py b/vdsm/storage/imagetickets.py
new file mode 100644
index 0000000..62ada7d
--- /dev/null
+++ b/vdsm/storage/imagetickets.py
@@ -0,0 +1,104 @@
+#
+# Copyright 2009-2012 Red Hat, Inc.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+#
+# Refer to the README and COPYING files for full details of the license
+#
+
+import functools
+import httplib
+import json
+import logging
+import os
+
+from contextlib import closing
+
+from vdsm import constants
+
+import storage_exception as se
+
+try:
+    from ovirt_image_daemon import uhttp
+    _have_image_daemon = True
+except ImportError:
+    _have_image_daemon = False
+
+DAEMON_SOCK = os.path.join(constants.P_VDSM_RUN, "ovirt-image-daemon.sock")
+
+log = logging.getLogger('storage.imagetickets')
+
+
+def requires_image_daemon(func):
+    @functools.wraps(func)
+    def wrapper(*args, **kw):
+        if not _have_image_daemon:
+            raise se.ImageDeamonUnsupported()
+        return func(*args, **kw)
+
+    return wrapper
+
+
+@requires_image_daemon
+def add_ticket(ticket):
+    body = json.dumps(ticket)
+    request(uhttp.PUT, ticket["uuid"], body)
+
+
+@requires_image_daemon
+def extend_ticket(uuid, timeout):
+    body = json.dumps({"timeout": timeout})
+    request(uhttp.PATCH, uuid, body)
+
+
+@requires_image_daemon
+def remove_ticket(uuid):
+    request(uhttp.DELETE, uuid)
+
+
+def request(method, uuid, body=None):
+    log.debug("Sending request method=%r, ticket=%r, body=%r",
+              method, uuid, body)
+    con = uhttp.UnixHTTPConnection(DAEMON_SOCK)
+    with closing(con):
+        try:
+            con.request(method, "/tickets/%s" % uuid, body=body)
+            res = con.getresponse()
+        except (httplib.HTTPException, EnvironmentError) as e:
+            raise se.ImageTicketsError("Error communicating with "
+                                       "ovirt-image-daemon: "
+                                       "{error}".format(error=e))
+
+        if res.status >= 300:
+            try:
+                content_length = int(res.getheader("content-length",
+                                                   default=""))
+            except ValueError as e:
+                error_info = {"explanation": "Invalid content-length",
+                              "detail": str(e)}
+                raise se.ImageDeamonError(res.status, res.reason, error_info)
+
+            try:
+                res_data = res.read(content_length)
+            except EnvironmentError as e:
+                error_info = {"explanation": "Error reading response",
+                              "detail": str(e)}
+                raise se.ImageDaemonError(res.status, res.reason, error_info)
+
+            try:
+                error_info = json.loads(res_data)
+            except ValueError as e:
+                error_info = {"explanation": "Invalid JSON", "detail": str(e)}
+            raise se.ImageDaemonError(res.status, res.reason, error_info)
diff --git a/vdsm/storage/storage_exception.py b/vdsm/storage/storage_exception.py
index 6e8432a..0170f11 100644
--- a/vdsm/storage/storage_exception.py
+++ b/vdsm/storage/storage_exception.py
@@ -1204,6 +1204,30 @@ class UnsupportedGlusterVolumeReplicaCountError(StorageException):
         self.value = "replica count = %s" % replicaCount
 
 
+class ImageTicketsError(StorageException):
+    code = 481
+    message = "Cannot communicate with image daemon"
+
+    def __init__(self, reason):
+        self.value = "reason=%s" % reason
+
+
+class ImageDeamonError(StorageException):
+    code = 482
+    message = "Image daemon request failed"
+
+    def __init__(self, status, reason, error_info):
+        d = error_info.copy()
+        d['status'] = status
+        d['reason'] = reason
+        self.value = ", ".join("%s=%s" % (k, v) for k, v in d.items())
+
+
+class ImageDeamonUnsupported(StorageException):
+    code = 483
+    message = "Image daemon is unsupported"
+
+
 #################################################
 #  LVM related Exceptions
 #################################################
-- 
1.9.3

